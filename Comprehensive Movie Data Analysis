{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "db356953-d58e-4db6-b0d2-5e67b4184373",
   "metadata": {},
   "source": [
    "# **Comprehensive Movie Data Analysis**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ab56f0b7-3e1f-4416-afda-2a038379a67b",
   "metadata": {},
   "source": [
    "Welcome to the comprehensive analysis of movie data. This project includes various analyses such as exploring IMDb ratings trends, comparing ratings across studios, and examining the impact of languages on ratings. Below, you'll find detailed insights and visualizations based on the dataset provided."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "600faade-d88f-4eaa-aa6a-285f57eaf9e5",
   "metadata": {},
   "source": [
    "## **Q1. What is the average IMDb rating for the movies in this dataset?**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "eaf24221-bb5f-4a63-97c2-cead80ea8517",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7.947368421052632"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Load the dataset\n",
    "file_path = r'C:\\Users\\ADMIN\\Desktop\\movies-db-1.xlsx'  # Use raw string to handle backslashes\n",
    "df = pd.read_excel(file_path)\n",
    "\n",
    "# Calculate the average IMDb rating\n",
    "average_rating = df['imdb_rating'].mean()\n",
    "\n",
    "# Display the average IMDb rating\n",
    "average_rating"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3bf89a3b-37e8-45f9-bc0d-d407a85a5f8f",
   "metadata": {},
   "source": [
    "## **Q2. What is the distribution of movies across different industries (e.g., Hollywood, Bollywood)?**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "e21cc48d-8a2f-4a75-98be-6d41082a3181",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Industry</th>\n",
       "      <th>Number of Movies</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Hollywood</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Bollywood</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Industry  Number of Movies\n",
       "0  Hollywood                21\n",
       "1  Bollywood                18"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Load the dataset\n",
    "file_path = r'C:\\Users\\ADMIN\\Desktop\\movies-db-1.xlsx'  # Use raw string to handle backslashes\n",
    "df = pd.read_excel(file_path)\n",
    "\n",
    "# Group by industry and count the number of movies in each industry\n",
    "industry_distribution = df['industry'].value_counts().reset_index()\n",
    "industry_distribution.columns = ['Industry', 'Number of Movies']\n",
    "\n",
    "# Display the distribution\n",
    "industry_distribution\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4bf3d455-6ac1-45fa-8ad5-c338a1a10d36",
   "metadata": {},
   "source": [
    "## **Q3. How has the average IMDb rating changed over the years?**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "ab7ebb4e-8db1-457b-81ca-a7a3a9fbd0a4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Release Year</th>\n",
       "      <th>Average IMDb Rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1946</td>\n",
       "      <td>8.600000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1955</td>\n",
       "      <td>8.300000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1972</td>\n",
       "      <td>9.200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1975</td>\n",
       "      <td>8.100000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1993</td>\n",
       "      <td>8.600000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1994</td>\n",
       "      <td>9.300000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1995</td>\n",
       "      <td>8.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1997</td>\n",
       "      <td>7.900000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2000</td>\n",
       "      <td>8.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2001</td>\n",
       "      <td>7.400000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>2003</td>\n",
       "      <td>8.100000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>2006</td>\n",
       "      <td>8.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>2007</td>\n",
       "      <td>8.300000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>2008</td>\n",
       "      <td>9.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>2009</td>\n",
       "      <td>8.100000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>2010</td>\n",
       "      <td>8.800000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>2011</td>\n",
       "      <td>6.900000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>2013</td>\n",
       "      <td>6.800000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>2014</td>\n",
       "      <td>8.166667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>2015</td>\n",
       "      <td>7.766667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>2017</td>\n",
       "      <td>7.900000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>2018</td>\n",
       "      <td>5.150000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>2019</td>\n",
       "      <td>8.450000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>2021</td>\n",
       "      <td>8.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>2022</td>\n",
       "      <td>7.700000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Release Year  Average IMDb Rating\n",
       "0           1946             8.600000\n",
       "1           1955             8.300000\n",
       "2           1972             9.200000\n",
       "3           1975             8.100000\n",
       "4           1993             8.600000\n",
       "5           1994             9.300000\n",
       "6           1995             8.000000\n",
       "7           1997             7.900000\n",
       "8           2000             8.500000\n",
       "9           2001             7.400000\n",
       "10          2003             8.100000\n",
       "11          2006             8.000000\n",
       "12          2007             8.300000\n",
       "13          2008             9.000000\n",
       "14          2009             8.100000\n",
       "15          2010             8.800000\n",
       "16          2011             6.900000\n",
       "17          2013             6.800000\n",
       "18          2014             8.166667\n",
       "19          2015             7.766667\n",
       "20          2017             7.900000\n",
       "21          2018             5.150000\n",
       "22          2019             8.450000\n",
       "23          2021             8.000000\n",
       "24          2022             7.700000"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Load the dataset\n",
    "file_path = r'C:\\Users\\ADMIN\\Desktop\\movies-db-1.xlsx'  # Use raw string to handle backslashes\n",
    "df = pd.read_excel(file_path)\n",
    "\n",
    "# Group by release year and calculate the average IMDb rating for each year\n",
    "average_rating_by_year = df.groupby('release_year')['imdb_rating'].mean().reset_index()\n",
    "\n",
    "# Rename columns for clarity\n",
    "average_rating_by_year.columns = ['Release Year', 'Average IMDb Rating']\n",
    "\n",
    "# Display the result\n",
    "average_rating_by_year"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "466c8c42-8d84-4c2f-82c0-02ba542c8fed",
   "metadata": {},
   "source": [
    "## **Q4. What are the trends in the number of movies released each year?**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "e8b1e475-d5d3-453b-8d32-bf0c5114b990",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Release Year</th>\n",
       "      <th>Number of Movies</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1946</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1955</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1972</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1975</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1993</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1994</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1995</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1997</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2001</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>2003</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>2006</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>2007</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>2008</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>2009</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>2010</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>2011</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>2013</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>2014</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>2015</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>2017</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>2018</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>2019</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>2021</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>2022</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Release Year  Number of Movies\n",
       "0           1946                 1\n",
       "1           1955                 1\n",
       "2           1972                 1\n",
       "3           1975                 1\n",
       "4           1993                 2\n",
       "5           1994                 1\n",
       "6           1995                 1\n",
       "7           1997                 1\n",
       "8           2000                 1\n",
       "9           2001                 1\n",
       "10          2003                 1\n",
       "11          2006                 1\n",
       "12          2007                 1\n",
       "13          2008                 1\n",
       "14          2009                 2\n",
       "15          2010                 1\n",
       "16          2011                 1\n",
       "17          2013                 1\n",
       "18          2014                 3\n",
       "19          2015                 3\n",
       "20          2017                 1\n",
       "21          2018                 3\n",
       "22          2019                 2\n",
       "23          2021                 2\n",
       "24          2022                 5"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Load the dataset\n",
    "file_path = r'C:\\Users\\ADMIN\\Desktop\\movies-db-1.xlsx'  # Use raw string to handle backslashes\n",
    "df = pd.read_excel(file_path)\n",
    "\n",
    "# Group by release year and count the number of movies released each year\n",
    "movies_per_year = df.groupby('release_year').size().reset_index(name='Number of Movies')\n",
    "\n",
    "# Rename columns for clarity\n",
    "movies_per_year.columns = ['Release Year', 'Number of Movies']\n",
    "\n",
    "# Display the result\n",
    "movies_per_year"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ba130a3a-5c33-4345-9b5a-273977d709f6",
   "metadata": {},
   "source": [
    "## **Q5. Which movies have the highest IMDb ratings?**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "751e8b42-2a70-4d59-9316-172254474269",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>imdb_rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>The Shawshank Redemption</td>\n",
       "      <td>9.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>The Godfather</td>\n",
       "      <td>9.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>The Dark Knight</td>\n",
       "      <td>9.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Schindler's List</td>\n",
       "      <td>9.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Inception</td>\n",
       "      <td>8.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>It's a Wonderful Life</td>\n",
       "      <td>8.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Interstellar</td>\n",
       "      <td>8.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Parasite</td>\n",
       "      <td>8.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Gladiator</td>\n",
       "      <td>8.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Avengers: Infinity War</td>\n",
       "      <td>8.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Avengers: Endgame</td>\n",
       "      <td>8.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>K.G.F: Chapter 2</td>\n",
       "      <td>8.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Shershaah</td>\n",
       "      <td>8.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>3 Idiots</td>\n",
       "      <td>8.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>The Kashmir Files</td>\n",
       "      <td>8.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Taare Zameen Par</td>\n",
       "      <td>8.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Pather Panchali</td>\n",
       "      <td>8.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Jurassic Park</td>\n",
       "      <td>8.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Munna Bhai M.B.B.S.</td>\n",
       "      <td>8.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Sholay</td>\n",
       "      <td>8.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Bajrangi Bhaijaan</td>\n",
       "      <td>8.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>PK</td>\n",
       "      <td>8.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>RRR</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>Baahubali: The Beginning</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>The Pursuit of Happyness</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>Dilwale Dulhania Le Jayenge</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>Thor: Ragnarok</td>\n",
       "      <td>7.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>Titanic</td>\n",
       "      <td>7.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>Captain America: The Winter Soldier</td>\n",
       "      <td>7.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>Avatar</td>\n",
       "      <td>7.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>Pushpa: The Rise - Part 1</td>\n",
       "      <td>7.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>Kabhi Khushi Kabhie Gham</td>\n",
       "      <td>7.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>Bajirao Mastani</td>\n",
       "      <td>7.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>Doctor Strange in the Multiverse of Madness</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>Captain America: The First Avenger</td>\n",
       "      <td>6.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>Thor: The Dark World</td>\n",
       "      <td>6.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>Thor: Love and Thunder</td>\n",
       "      <td>6.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>Race 3</td>\n",
       "      <td>1.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>Sanju</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          title  imdb_rating\n",
       "0                      The Shawshank Redemption          9.3\n",
       "1                                 The Godfather          9.2\n",
       "2                               The Dark Knight          9.0\n",
       "3                              Schindler's List          9.0\n",
       "4                                     Inception          8.8\n",
       "5                         It's a Wonderful Life          8.6\n",
       "6                                  Interstellar          8.6\n",
       "7                                      Parasite          8.5\n",
       "8                                     Gladiator          8.5\n",
       "9                        Avengers: Infinity War          8.4\n",
       "10                            Avengers: Endgame          8.4\n",
       "11                             K.G.F: Chapter 2          8.4\n",
       "12                                    Shershaah          8.4\n",
       "13                                     3 Idiots          8.4\n",
       "14                            The Kashmir Files          8.3\n",
       "15                             Taare Zameen Par          8.3\n",
       "16                              Pather Panchali          8.3\n",
       "17                                Jurassic Park          8.2\n",
       "18                          Munna Bhai M.B.B.S.          8.1\n",
       "19                                       Sholay          8.1\n",
       "20                            Bajrangi Bhaijaan          8.1\n",
       "21                                           PK          8.1\n",
       "22                                          RRR          8.0\n",
       "23                     Baahubali: The Beginning          8.0\n",
       "24                     The Pursuit of Happyness          8.0\n",
       "25                  Dilwale Dulhania Le Jayenge          8.0\n",
       "26                              Thor: Ragnarok           7.9\n",
       "27                                      Titanic          7.9\n",
       "28          Captain America: The Winter Soldier          7.8\n",
       "29                                       Avatar          7.8\n",
       "30                    Pushpa: The Rise - Part 1          7.6\n",
       "31                     Kabhi Khushi Kabhie Gham          7.4\n",
       "32                             Bajirao Mastani           7.2\n",
       "33  Doctor Strange in the Multiverse of Madness          7.0\n",
       "34           Captain America: The First Avenger          6.9\n",
       "35                        Thor: The Dark World           6.8\n",
       "36                      Thor: Love and Thunder           6.8\n",
       "37                                       Race 3          1.9\n",
       "38                                        Sanju          NaN"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Load the dataset\n",
    "file_path = r'C:\\Users\\ADMIN\\Desktop\\movies-db-1.xlsx'  # Use raw string to handle backslashes\n",
    "df = pd.read_excel(file_path)\n",
    "\n",
    "# Sort the movies by IMDb rating in descending order and select the top ones\n",
    "top_movies = df[['title', 'imdb_rating']].sort_values(by='imdb_rating', ascending=False).reset_index(drop=True)\n",
    "\n",
    "# Display the top movies with highest IMDb ratings\n",
    "top_movies"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "58e4e84e-9232-4d4b-ba72-9ecb45a568d2",
   "metadata": {},
   "source": [
    "## **Q6. Which studios have produced the highest-rated movies on average?**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d7953529-e792-4b9f-a356-458f18a4b466",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Studio</th>\n",
       "      <th>Average IMDb Rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Castle Rock Entertainment</td>\n",
       "      <td>9.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Syncopy</td>\n",
       "      <td>9.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Warner Bros. Pictures</td>\n",
       "      <td>8.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Liberty Films</td>\n",
       "      <td>8.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Universal Pictures</td>\n",
       "      <td>8.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Paramount Pictures</td>\n",
       "      <td>8.55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Universal Pictures</td>\n",
       "      <td>8.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Hombale Films</td>\n",
       "      <td>8.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Zee Studios</td>\n",
       "      <td>8.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Government of West Bengal</td>\n",
       "      <td>8.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Vinod Chopra Films</td>\n",
       "      <td>8.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>United Producers</td>\n",
       "      <td>8.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Vinod Chopra Productions</td>\n",
       "      <td>8.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Arka Media Works</td>\n",
       "      <td>8.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>DVV Entertainment</td>\n",
       "      <td>8.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Columbia Pictures</td>\n",
       "      <td>8.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Yash Raj Films</td>\n",
       "      <td>8.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Dharma Productions</td>\n",
       "      <td>7.90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>20th Century Fox</td>\n",
       "      <td>7.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Mythri Movie Makers</td>\n",
       "      <td>7.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Marvel Studios</td>\n",
       "      <td>7.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Salman Khan Films</td>\n",
       "      <td>5.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       Studio  Average IMDb Rating\n",
       "0   Castle Rock Entertainment                 9.30\n",
       "1                     Syncopy                 9.00\n",
       "2       Warner Bros. Pictures                 8.70\n",
       "3               Liberty Films                 8.60\n",
       "4          Universal Pictures                 8.60\n",
       "5          Paramount Pictures                 8.55\n",
       "6        Universal Pictures                   8.50\n",
       "7               Hombale Films                 8.40\n",
       "8                 Zee Studios                 8.30\n",
       "9   Government of West Bengal                 8.30\n",
       "10         Vinod Chopra Films                 8.25\n",
       "11           United Producers                 8.10\n",
       "12   Vinod Chopra Productions                 8.10\n",
       "13           Arka Media Works                 8.00\n",
       "14          DVV Entertainment                 8.00\n",
       "15          Columbia Pictures                 8.00\n",
       "16             Yash Raj Films                 8.00\n",
       "17         Dharma Productions                 7.90\n",
       "18           20th Century Fox                 7.80\n",
       "19        Mythri Movie Makers                 7.60\n",
       "20             Marvel Studios                 7.50\n",
       "21          Salman Khan Films                 5.00"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Load the dataset\n",
    "file_path = r'C:\\Users\\ADMIN\\Desktop\\movies-db-1.xlsx'  # Use raw string to handle backslashes\n",
    "df = pd.read_excel(file_path)\n",
    "\n",
    "# Group by studio and calculate the average IMDb rating for each studio\n",
    "studio_ratings = df.groupby('studio')['imdb_rating'].mean().reset_index()\n",
    "\n",
    "# Rename columns for clarity\n",
    "studio_ratings.columns = ['Studio', 'Average IMDb Rating']\n",
    "\n",
    "# Sort by average IMDb rating in descending order\n",
    "studio_ratings = studio_ratings.sort_values(by='Average IMDb Rating', ascending=False).reset_index(drop=True)\n",
    "\n",
    "# Display the result\n",
    "studio_ratings"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4cf851c7-e5f2-40d9-a22e-fd52d7a0ebd0",
   "metadata": {},
   "source": [
    "## **Q7. Compare the average IMDb ratings between Hollywood and Bollywood movies.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "73a90dea-2d9d-4b02-bad2-9d057cd89ed1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Industry</th>\n",
       "      <th>Average IMDb Rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Bollywood</td>\n",
       "      <td>7.682353</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Hollywood</td>\n",
       "      <td>8.161905</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Industry  Average IMDb Rating\n",
       "0  Bollywood             7.682353\n",
       "1  Hollywood             8.161905"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Load the dataset\n",
    "file_path = r'C:\\Users\\ADMIN\\Desktop\\movies-db-1.xlsx'  # Use raw string to handle backslashes\n",
    "df = pd.read_excel(file_path)\n",
    "\n",
    "# Calculate the average IMDb rating for each industry\n",
    "ratings_by_industry = df.groupby('industry')['imdb_rating'].mean().reset_index()\n",
    "\n",
    "# Rename columns for clarity\n",
    "ratings_by_industry.columns = ['Industry', 'Average IMDb Rating']\n",
    "\n",
    "# Display the result\n",
    "ratings_by_industry"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3ce680ef-40c2-46fa-ab68-2b86d9c4db02",
   "metadata": {},
   "source": [
    "## **Q8. Which industry has the highest number of movies in the dataset?**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "4d92e3ad-9e10-4aab-a54b-b1996d9e83b9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Industry</th>\n",
       "      <th>Number of Movies</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Hollywood</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Bollywood</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Industry  Number of Movies\n",
       "0  Hollywood                21\n",
       "1  Bollywood                18"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Load the dataset\n",
    "file_path = r'C:\\Users\\ADMIN\\Desktop\\movies-db-1.xlsx'  # Use raw string to handle backslashes\n",
    "df = pd.read_excel(file_path)\n",
    "\n",
    "# Count the number of movies in each industry\n",
    "industry_counts = df['industry'].value_counts().reset_index()\n",
    "industry_counts.columns = ['Industry', 'Number of Movies']\n",
    "\n",
    "# Display the result\n",
    "industry_counts"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0d4d378c-56e9-4044-9657-a642ea1c08bf",
   "metadata": {},
   "source": [
    "## **Q9. Create a histogram of the IMDb ratings. What insights can you draw from this visualization?**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "96554843-f9e9-4131-a5b9-e0768d3e7f36",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "count    38.000000\n",
       "mean      7.947368\n",
       "std       1.180869\n",
       "min       1.900000\n",
       "25%       7.825000\n",
       "50%       8.100000\n",
       "75%       8.400000\n",
       "max       9.300000\n",
       "Name: imdb_rating, dtype: float64"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Load the dataset\n",
    "file_path = r'C:\\Users\\ADMIN\\Desktop\\movies-db-1.xlsx'  # Use raw string to handle backslashes\n",
    "df = pd.read_excel(file_path)\n",
    "\n",
    "# Plot a histogram of IMDb ratings\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.hist(df['imdb_rating'].dropna(), bins=20, edgecolor='black', alpha=0.7)\n",
    "plt.title('Distribution of IMDb Ratings')\n",
    "plt.xlabel('IMDb Rating')\n",
    "plt.ylabel('Frequency')\n",
    "plt.grid(True)\n",
    "plt.show()\n",
    "\n",
    "# Display basic statistics of IMDb ratings for additional insights\n",
    "rating_stats = df['imdb_rating'].describe()\n",
    "rating_stats"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0add7f73-1a0e-4402-bfc3-840e0d0f82b1",
   "metadata": {},
   "source": [
    "## **Q10. Create a bar plot showing the number of movies released each year. What trends do you observe?**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "ede97533-892e-4833-9c27-0f803e57dff5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Load the dataset\n",
    "file_path = r'C:\\Users\\ADMIN\\Desktop\\movies-db-1.xlsx'  # Use raw string to handle backslashes\n",
    "df = pd.read_excel(file_path)\n",
    "\n",
    "# Group by release year and count the number of movies released each year\n",
    "movies_per_year = df.groupby('release_year').size().reset_index(name='Number of Movies')\n",
    "\n",
    "# Create a bar plot of the number of movies released each year\n",
    "plt.figure(figsize=(12, 8))\n",
    "plt.bar(movies_per_year['release_year'], movies_per_year['Number of Movies'], color='skyblue')\n",
    "plt.title('Number of Movies Released Each Year')\n",
    "plt.xlabel('Release Year')\n",
    "plt.ylabel('Number of Movies')\n",
    "plt.xticks(rotation=45)\n",
    "plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ea844e42-bb42-4fcb-8e7f-646643a52edd",
   "metadata": {},
   "source": [
    "## **Q11. Create a box plot to compare the IMDb ratings between Hollywood and Bollywood movies. What do the medians and quartiles tell you?**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "0a1df4b3-a6de-4446-8e34-591038cd99aa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 1000x600 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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jzt37iAsLOy57aZOnQonJyfl5eHhUTAFEhEREb0gqgxn3377Ldq1awd3d/fnths3bhwSExOV16VLlwqoQiIiIqIXQ3WHNS9cuIDt27cjKioqy7Z6vR56vb4AqiIiIiIqGKrbcxYZGYnSpUujQ4cO5i6FiIiIqMCpKpylpqYiMjISoaGhsLBQ3U49IiIiohdOVeFs+/btuHjxIgYMGGDuUoiIiIjMQlW7p1q3bg0RMXcZRERERGajqj1nRERERMWdqvacERERpffgwQPEx8dn2S7uRhzwDxD3Vxxw5fltfX19YWtrm08VEuU/hjMiIlKt+Ph41KlTJ9vt+yzok2WbmJgY1K5dOy9lEb1QDGdERKRavr6+iImJybLdwycPcf72eXg5e8HGwibLYRKpGcMZERGplq2tbbb3cgUi8AVXQ1QweEEAERERkYownBERERGpCMMZERERkYownBERERGpCMMZERERkYownBERERGpCMMZERERkYownBERERGpCMMZERERkYownBERERGpSJ4e3/Tqq69Co9GYdNdoNLC2toaPjw969+6NqlWr5mU0RERERMVGnvacOTk5YefOnThy5Ag0Gg00Gg3++OMP7Ny5E0+ePMHKlStRs2ZN7Nu3L7/qJSIiIirS8rTnrGzZsujduzciIiKg1T7NeampqRg+fDgcHBzwww8/4O2338aYMWPw66+/5kvBREREREWZRkQktx92dXXFvn37UKVKFaPup06dQqNGjXDz5k0cO3YMQUFBuHPnTl5rzVJSUhKcnJyQmJgIR0fHFz4+IiIiMr+itv3P02HNJ0+eID4+3qR7fHw8UlJSAADW1tYZnpdGRERERKbydFizb9++eOONNzB+/HjUq1cPAHDo0CF8+umn6NevHwBgz5498Pf3z3ulRERERMVAnsLZjBkzUKZMGXz++ee4du0aAKBMmTIYOXIkxowZAwBo3bo12rZtm/dKiYiIiIqBPJ1zll5SUhIAmPVYb1E75kxERERZK2rb/zztOUuvKMwMIiIiInPL0wUB165dQ9++feHu7g4LCwvodDqjFxERERHlTJ72nIWFheHixYv4z3/+Azc3N16VSURERJRHeQpnv/76K6Kjo1GrVq18KoeIiIioeMvTYU0PDw/k0/UERERERIQ8hrOZM2di7NixOH/+fD6VQ0RERFS85emwZo8ePfDg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lHKVflJSUp4bnHQ6HZ48eZLzYiwsULZs2dyURERERFQk5CqciQjCwsKg1+sz7G8wGHJVTEJCAtzd3WFtbY2GDRti6tSpqFChQqbtDQaD0biSkpJyNV4iIiIitchVOAsNDc2yTU6v1GzQoAEWLVqEqlWr4sqVK5g8eTKCgoIQGxsLBweHDD8zdepUPsOTiIiIipQcP1uzoNy5cweenp6YPn063njjjQzbZLTnzMPDo8g8W4uIiIiyVuyfrVlQSpQogSpVquD06dOZttHr9ZkeWiUiIiIqjHIVzgYMGJCtdt99911uBg8AuHfvHs6cOYO+ffvmehhEREREhU2unxDg6emJl156Cfl1VPS9995Dx44d4enpiX/++QcTJ06ETqdDr1698mX4RERERIVBrsLZO++8gxUrVuDcuXPo378/+vTpg5IlS+apkMuXL6NXr174999/4erqisaNG+PgwYNwdXXN03CJiIiICpNcXxBgMBgQFRWF7777Dvv370eHDh3wxhtvoHXr1tBoNPldZ7YUtRMCiYiIKGtFbfufL1drXrhwAYsWLcL333+PJ0+e4Pjx47C3t8+P+nKkqH05RERElLWitv3P1bM1TQai1UKj0UBEkJKSkh+DJCIiIiqWch3ODAYDVqxYgVatWqFKlSo4duwYIiIicPHiRbPsNSMiIiIqCnJ1QcDgwYPxww8/wMPDAwMGDMCKFStQqlSp/K6NiIiIqNjJ1TlnWq0WFSpUwEsvvfTck/+joqLyVFxOFbVjzkRERJS1orb9z9Wes379+pntikwiIiKioizXN6ElIiIiovyXL1drEhEREVH+yNWes5CQkGy1K+hzzoiIiIgKu1yFMycnp/yug4iIiIiQy3AWGRmZ33UQEREREXjOGREREZGqMJwRERERqQjDGREREZGKMJwRERERqQjDGREREZGKMJwRERERqQjDGREREZGKMJwRERERqQjDGREREZGKMJwRERERqQjDGREREZGKMJwRERERqQjDGREREZGKMJwRERERqQjDGREREZGKMJwRERERqQjDGREREZGKMJwRERERqQjDGREREZGKMJwRERERqQjDGREREZGKMJwRERERqQjDGREREZGKqDacffbZZ9BoNBgxYoS5SyEiIiIqMKoMZ4cOHcL8+fNRo0YNc5dCREREVKBUF87u3buH119/HQsXLoSzs/Nz2xoMBiQlJRm9iIiIiAoz1YWz8PBwdOjQAS1btsyy7dSpU+Hk5KS8PDw8CqBCIiIiohdHVeHshx9+wJEjRzB16tRstR83bhwSExOV16VLl15whUREREQvloW5C0hz6dIlDB8+HNu2bYO1tXW2PqPX66HX619wZUREREQFRyMiYu4iAGD9+vV49dVXodPplG4pKSnQaDTQarUwGAxG/TKSlJQEJycnJCYmwtHR8UWXTERERCpQ1Lb/qtlz1qJFCxw7dsyoW//+/eHr64sxY8ZkGcyIiIiIigLVhDMHBwdUr17dqJudnR1cXFxMuhMREREVVaq6IICIiIiouFPNnrOM7N6929wlEBERERUo7jkjIiIiUhGGMyIiIiIVYTgjIiIiUhGGMyIiIiIVYTgjIiIiUhGGMyIiIiIVYTgjIiIiUhGGMyIiIiIVYTgjIiIiUhGGMyIiIiIVYTgjIiIiUhGGMyIiIiIVYTgjIiIiUhGGMyIiIiIVYTgjIiIiUhGGMyIiIiIVYTgjIiIiUhGGMyIiIiIVYTgjIiIiUhGGMyIiIiIVYTgjIiIiUhGGMyIiIiIVYTgjIiIiUhGGMyIiIiIVYTgjIiIiUhGGMyIiIiIVYTgjIiIiUhGGMyIiIiIVYTgjIiIiUhGGMyIiIiIVYTgjIiIiUhGGMyIiIiIVYTgjIiIiUhHVhLN58+ahRo0acHR0hKOjIxo2bIjNmzebuywiIiKiAqWacFa+fHl89tlniImJweHDh9G8eXN07twZx48fN3dpRERERAVGIyJi7iIyU7JkSXzxxRd44403stU+KSkJTk5OSExMhKOj4wuujoiIiNSgqG3/LcxdQEZSUlKwevVq3L9/Hw0bNsy0ncFggMFgUN4nJSUVRHlEREREL4xqDmsCwLFjx2Bvbw+9Xo+3334b69atQ7Vq1TJtP3XqVDg5OSkvDw+PAqyWiIiIKP+p6rBmcnIyLl68iMTERKxZswbffPMN9uzZk2lAy2jPmYeHR5HZrUlERERZK2qHNVUVzp7VsmVLeHt7Y/78+dlqX9S+HCIiIspaUdv+q+qw5rNSU1ON9owRERERFXWquSBg3LhxaNeuHSpUqIC7d+9i+fLl2L17N7Zs2WLu0oiIiIgKjGrC2fXr19GvXz9cuXIFTk5OqFGjBrZs2YJWrVqZuzQiIiKiAqOacPbtt9+auwQiIiIis1P1OWdERERExQ3DGREREZGKMJwRERERqQjDGREREZGKMJwRERERqQjDGREREZGKMJwRERERqQjDGREREZGKMJwRERERqQjDGREREZGKMJwRERERqQjDGREREZGKMJwRERERqQjDGREREZGKMJwRERERqQjDGREREZGKMJwRERERqQjDGREREZGKMJwRERERqQjDGREREZGKMJwRERERqQjDGREREZGKMJwRERERqQjDGREREZGKMJwRERERqQjDGREREZGKMJwRERERqQjDGREREZGKMJwRERERqQjDGREREZGKMJwRERERqQjDGREREZGKMJwRERERqYhqwtnUqVNRr149ODg4oHTp0ujSpQtOnjxp7rKIiIiICpRqwtmePXsQHh6OgwcPYtu2bXj8+DFat26N+/fvm7s0IiIiogKjERExdxEZuXHjBkqXLo09e/agSZMm2fpMUlISnJyckJiYCEdHxxdcIREREalBUdv+W5i7gMwkJiYCAEqWLJlpG4PBAIPBoLxPSkp64XWROqWkpCA6OhpXrlyBm5sbgoKCoNPpzF0WERFRjqnmsGZ6qampGDFiBAIDA1G9evVM202dOhVOTk7Ky8PDowCrJLWIioqCj48PgoOD0bt3bwQHB8PHxwdRUVHmLo2IiCjHVBnOwsPDERsbix9++OG57caNG4fExETldenSpQKqkNQiKioKXbt2RUBAAA4cOIC7d+/iwIEDCAgIQNeuXRnQiIio0FHdOWdDhgzBhg0bsHfvXlSsWDFHny1qx5zp+VJSUuDj44OAgACsX78eWu3//tZITU1Fly5dEBsbi4SEBB7iJCIqwora9l81e85EBEOGDMG6deuwc+fOHAczKn6io6Nx/vx5jB8/3iiYAYBWq8W4ceNw7tw5REdHm6lCIiKinFPNBQHh4eFYvnw5NmzYAAcHB1y9ehUA4OTkBBsbGzNXR2p05coVAMj0vMS07mntiIiICgPV7DmbN28eEhMT0axZM7i5uSmvlStXmrs0Uik3NzcAQGxsbIb907qntSMiIioMVHfOWV4UtWPO9Hw854yIiICit/1XzZ4zopzS6XT46quvsHHjRnTp0sXoas0uXbpg48aN+PLLLxnMiIioUFHNOWdEuRESEoI1a9bg3XffRaNGjZTuFStWxJo1axASEmLG6oiIiHKOhzWpSOATAoiI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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>industry</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Bollywood</th>\n",
       "      <td>17.0</td>\n",
       "      <td>7.682353</td>\n",
       "      <td>1.529802</td>\n",
       "      <td>1.9</td>\n",
       "      <td>8.0</td>\n",
       "      <td>8.1</td>\n",
       "      <td>8.3</td>\n",
       "      <td>8.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hollywood</th>\n",
       "      <td>21.0</td>\n",
       "      <td>8.161905</td>\n",
       "      <td>0.774258</td>\n",
       "      <td>6.8</td>\n",
       "      <td>7.8</td>\n",
       "      <td>8.4</td>\n",
       "      <td>8.6</td>\n",
       "      <td>9.3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           count      mean       std  min  25%  50%  75%  max\n",
       "industry                                                     \n",
       "Bollywood   17.0  7.682353  1.529802  1.9  8.0  8.1  8.3  8.4\n",
       "Hollywood   21.0  8.161905  0.774258  6.8  7.8  8.4  8.6  9.3"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Load the dataset\n",
    "file_path = r'C:\\Users\\ADMIN\\Desktop\\movies-db-1.xlsx'  # Use raw string to handle backslashes\n",
    "df = pd.read_excel(file_path)\n",
    "\n",
    "# Create a box plot to compare IMDb ratings between Hollywood and Bollywood movies\n",
    "plt.figure(figsize=(10, 6))\n",
    "df.boxplot(column='imdb_rating', by='industry', grid=False, patch_artist=True, \n",
    "           boxprops=dict(facecolor='lightblue', color='blue'), \n",
    "           medianprops=dict(color='red'), \n",
    "           whiskerprops=dict(color='green'))\n",
    "\n",
    "plt.title('Comparison of IMDb Ratings Between Hollywood and Bollywood Movies')\n",
    "plt.suptitle('')  # Remove the default suptitle\n",
    "plt.xlabel('Industry')\n",
    "plt.ylabel('IMDb Rating')\n",
    "plt.xticks([1, 2], ['Hollywood', 'Bollywood'])\n",
    "plt.show()\n",
    "\n",
    "# Display basic statistics for further insights\n",
    "rating_stats_by_industry = df.groupby('industry')['imdb_rating'].describe()\n",
    "rating_stats_by_industry"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a837c041-d72d-4e79-b832-b88e4ddad155",
   "metadata": {},
   "source": [
    "## **Q12. Is there a correlation between the release year and the IMDb rating? If so, what does it indicate?**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "95b63bc1-55fe-4684-94d2-ee3a90172a34",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "-0.27562737146913135"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Load the dataset\n",
    "file_path = r'C:\\Users\\ADMIN\\Desktop\\movies-db-1.xlsx'  # Use raw string to handle backslashes\n",
    "df = pd.read_excel(file_path)\n",
    "\n",
    "# Calculate the correlation between release year and IMDb rating\n",
    "correlation = df[['release_year', 'imdb_rating']].corr().iloc[0, 1]\n",
    "\n",
    "# Create a scatter plot to visualize the correlation\n",
    "plt.figure(figsize=(10, 6))\n",
    "sns.scatterplot(x='release_year', y='imdb_rating', data=df, alpha=0.6)\n",
    "plt.title(f'Correlation Between Release Year and IMDb Rating (Correlation = {correlation:.2f})')\n",
    "plt.xlabel('Release Year')\n",
    "plt.ylabel('IMDb Rating')\n",
    "plt.grid(True)\n",
    "plt.show()\n",
    "\n",
    "# Display the correlation value\n",
    "correlation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "093ad9c9-1d69-4f01-9122-4ec7014b5e5d",
   "metadata": {},
   "source": [
    "## **Q13. Identify the top 5 studios based on the average IMDb rating of their movies.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "dba727b3-5fd0-4be6-8b0b-d1dc81fdbb4d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>studio</th>\n",
       "      <th>imdb_rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Castle Rock Entertainment</td>\n",
       "      <td>9.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Syncopy</td>\n",
       "      <td>9.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Warner Bros. Pictures</td>\n",
       "      <td>8.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Liberty Films</td>\n",
       "      <td>8.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Universal Pictures</td>\n",
       "      <td>8.6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       studio  imdb_rating\n",
       "2   Castle Rock Entertainment          9.3\n",
       "13                    Syncopy          9.0\n",
       "19      Warner Bros. Pictures          8.7\n",
       "8               Liberty Films          8.6\n",
       "15         Universal Pictures          8.6"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Load the dataset\n",
    "file_path = r'C:\\Users\\ADMIN\\Desktop\\movies-db-1.xlsx'  # Use raw string to handle backslashes\n",
    "df = pd.read_excel(file_path)\n",
    "\n",
    "# Group by studio and calculate the average IMDb rating for each studio\n",
    "studio_avg_ratings = df.groupby('studio')['imdb_rating'].mean().reset_index()\n",
    "\n",
    "# Sort studios by average IMDb rating in descending order and select the top 5\n",
    "top_5_studios = studio_avg_ratings.sort_values(by='imdb_rating', ascending=False).head(5)\n",
    "\n",
    "top_5_studios"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b7259c74-221a-43ab-bee8-a3d761295561",
   "metadata": {},
   "source": [
    "## **Q14. Analyze the distribution of movies across different languages using language_id. How does language affect the IMDb rating?**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "a2ae030d-3424-4968-b490-5f7d8a9ec329",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Language ID  Number of Movies  Average IMDb Rating\n",
      "0            5                21             8.161905\n",
      "1            1                13             7.525000\n",
      "2            2                 3             7.866667\n",
      "3            3                 1             8.400000\n",
      "4            7                 1             8.300000\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Load the dataset\n",
    "file_path = r'C:\\Users\\ADMIN\\Desktop\\movies-db-1.xlsx'  # Use raw string to handle backslashes\n",
    "df = pd.read_excel(file_path)\n",
    "\n",
    "# Analyze the distribution of movies across different languages\n",
    "language_distribution = df['language_id'].value_counts().reset_index()\n",
    "language_distribution.columns = ['Language ID', 'Number of Movies']\n",
    "\n",
    "# Plot the distribution of movies across different languages\n",
    "plt.figure(figsize=(12, 8))\n",
    "sns.barplot(x='Language ID', y='Number of Movies', data=language_distribution, palette='viridis', hue='Language ID', dodge=False)\n",
    "plt.title('Distribution of Movies Across Different Languages')\n",
    "plt.xlabel('Language ID')\n",
    "plt.ylabel('Number of Movies')\n",
    "plt.xticks(rotation=45)\n",
    "plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
    "plt.legend([],[], frameon=False)  # Hide the legend\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "# Analyze the effect of language on IMDb ratings\n",
    "# Group by language_id and calculate the average IMDb rating for each language\n",
    "language_avg_ratings = df.groupby('language_id')['imdb_rating'].mean().reset_index()\n",
    "language_avg_ratings.columns = ['Language ID', 'Average IMDb Rating']\n",
    "\n",
    "# Merge with distribution data for better insight\n",
    "language_analysis = pd.merge(language_distribution, language_avg_ratings, on='Language ID')\n",
    "\n",
    "# Display the results\n",
    "print(language_analysis)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8d6c2f5c-f195-4f2d-bbc8-c82ffe4eeefb",
   "metadata": {},
   "source": [
    "## **Q15. List all movies released after 2015 with an IMDb rating greater than 7.5.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "404ddb7e-5dc1-4d02-b577-eac7780b4210",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>release_year</th>\n",
       "      <th>imdb_rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>K.G.F: Chapter 2</td>\n",
       "      <td>2022</td>\n",
       "      <td>8.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Thor: Ragnarok</td>\n",
       "      <td>2017</td>\n",
       "      <td>7.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>Parasite</td>\n",
       "      <td>2019</td>\n",
       "      <td>8.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>Avengers: Endgame</td>\n",
       "      <td>2019</td>\n",
       "      <td>8.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>Avengers: Infinity War</td>\n",
       "      <td>2018</td>\n",
       "      <td>8.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>Pushpa: The Rise - Part 1</td>\n",
       "      <td>2021</td>\n",
       "      <td>7.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>RRR</td>\n",
       "      <td>2022</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>The Kashmir Files</td>\n",
       "      <td>2022</td>\n",
       "      <td>8.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>Shershaah</td>\n",
       "      <td>2021</td>\n",
       "      <td>8.4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        title  release_year  imdb_rating\n",
       "0            K.G.F: Chapter 2          2022          8.4\n",
       "3             Thor: Ragnarok           2017          7.9\n",
       "22                   Parasite          2019          8.5\n",
       "23          Avengers: Endgame          2019          8.4\n",
       "24     Avengers: Infinity War          2018          8.4\n",
       "30  Pushpa: The Rise - Part 1          2021          7.6\n",
       "31                        RRR          2022          8.0\n",
       "33          The Kashmir Files          2022          8.3\n",
       "38                  Shershaah          2021          8.4"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Load the dataset\n",
    "file_path = r'C:\\Users\\ADMIN\\Desktop\\movies-db-1.xlsx'  # Use raw string to handle backslashes\n",
    "df = pd.read_excel(file_path)\n",
    "\n",
    "# Filter the dataset for movies released after 2015 with an IMDb rating greater than 7.5\n",
    "filtered_movies = df[(df['release_year'] > 2015) & (df['imdb_rating'] > 7.5)]\n",
    "\n",
    "# Select relevant columns for display\n",
    "result = filtered_movies[['title', 'release_year', 'imdb_rating']]\n",
    "\n",
    "# Display the result\n",
    "result"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ccc06750-4422-4a25-9ed4-b68626e15a0a",
   "metadata": {},
   "source": [
    "## **Q16. Group the data by release_year and calculate the average IMDb rating for each year.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "2260ec1b-64bd-449f-b1a2-f330c22350b9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Release Year</th>\n",
       "      <th>Average IMDb Rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1946</td>\n",
       "      <td>8.600000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1955</td>\n",
       "      <td>8.300000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1972</td>\n",
       "      <td>9.200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1975</td>\n",
       "      <td>8.100000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1993</td>\n",
       "      <td>8.600000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1994</td>\n",
       "      <td>9.300000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1995</td>\n",
       "      <td>8.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1997</td>\n",
       "      <td>7.900000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2000</td>\n",
       "      <td>8.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2001</td>\n",
       "      <td>7.400000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>2003</td>\n",
       "      <td>8.100000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>2006</td>\n",
       "      <td>8.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>2007</td>\n",
       "      <td>8.300000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>2008</td>\n",
       "      <td>9.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>2009</td>\n",
       "      <td>8.100000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>2010</td>\n",
       "      <td>8.800000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>2011</td>\n",
       "      <td>6.900000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>2013</td>\n",
       "      <td>6.800000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>2014</td>\n",
       "      <td>8.166667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>2015</td>\n",
       "      <td>7.766667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>2017</td>\n",
       "      <td>7.900000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>2018</td>\n",
       "      <td>5.150000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>2019</td>\n",
       "      <td>8.450000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>2021</td>\n",
       "      <td>8.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>2022</td>\n",
       "      <td>7.700000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Release Year  Average IMDb Rating\n",
       "0           1946             8.600000\n",
       "1           1955             8.300000\n",
       "2           1972             9.200000\n",
       "3           1975             8.100000\n",
       "4           1993             8.600000\n",
       "5           1994             9.300000\n",
       "6           1995             8.000000\n",
       "7           1997             7.900000\n",
       "8           2000             8.500000\n",
       "9           2001             7.400000\n",
       "10          2003             8.100000\n",
       "11          2006             8.000000\n",
       "12          2007             8.300000\n",
       "13          2008             9.000000\n",
       "14          2009             8.100000\n",
       "15          2010             8.800000\n",
       "16          2011             6.900000\n",
       "17          2013             6.800000\n",
       "18          2014             8.166667\n",
       "19          2015             7.766667\n",
       "20          2017             7.900000\n",
       "21          2018             5.150000\n",
       "22          2019             8.450000\n",
       "23          2021             8.000000\n",
       "24          2022             7.700000"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Load the dataset\n",
    "file_path = r'C:\\Users\\ADMIN\\Desktop\\movies-db-1.xlsx'  # Use raw string to handle backslashes\n",
    "df = pd.read_excel(file_path)\n",
    "\n",
    "# Group by release_year and calculate the average IMDb rating for each year\n",
    "average_ratings_by_year = df.groupby('release_year')['imdb_rating'].mean().reset_index()\n",
    "\n",
    "# Rename columns for clarity\n",
    "average_ratings_by_year.columns = ['Release Year', 'Average IMDb Rating']\n",
    "\n",
    "# Display the result\n",
    "average_ratings_by_year"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7a31d38f-a23b-48be-92aa-a40b6c538416",
   "metadata": {},
   "source": [
    "## **Q17. Based on the dataset, which studio would you recommend a new director to approach for producing a high-rated movie?**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "25135434-b33a-488b-bf34-29ecad0a665f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>studio</th>\n",
       "      <th>imdb_rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Castle Rock Entertainment</td>\n",
       "      <td>9.3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      studio  imdb_rating\n",
       "2  Castle Rock Entertainment          9.3"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Load the dataset\n",
    "file_path = r'C:\\Users\\ADMIN\\Desktop\\movies-db-1.xlsx'  # Use raw string to handle backslashes\n",
    "df = pd.read_excel(file_path)\n",
    "\n",
    "# Group by studio and calculate the average IMDb rating for each studio\n",
    "studio_avg_ratings = df.groupby('studio')['imdb_rating'].mean().reset_index()\n",
    "\n",
    "# Sort studios by average IMDb rating in descending order\n",
    "top_studio = studio_avg_ratings.sort_values(by='imdb_rating', ascending=False).head(1)\n",
    "\n",
    "top_studio"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "12aeee2b-2ced-4950-b4d5-9d14f2b1205d",
   "metadata": {},
   "source": [
    "## **Q18. Formulate a hypothesis regarding the IMDb ratings of Hollywood vs. Bollywood movies. Test this hypothesis using statistical methods.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "1cfa70d0-3154-4010-b5b0-8d6e05f44eeb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(8.161904761904761, 7.68235294117647, 1.17626687064363, 0.25175807826484725)"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from scipy import stats\n",
    "\n",
    "# Load the dataset\n",
    "file_path = r'C:\\Users\\ADMIN\\Desktop\\movies-db-1.xlsx'  # Use raw string to handle backslashes\n",
    "df = pd.read_excel(file_path)\n",
    "\n",
    "# Filter data for Hollywood and Bollywood\n",
    "hollywood_movies = df[df['industry'] == 'Hollywood']\n",
    "bollywood_movies = df[df['industry'] == 'Bollywood']\n",
    "\n",
    "# Remove missing values in IMDb ratings\n",
    "hollywood_movies_clean = hollywood_movies.dropna(subset=['imdb_rating'])\n",
    "bollywood_movies_clean = bollywood_movies.dropna(subset=['imdb_rating'])\n",
    "\n",
    "# Calculate average IMDb ratings\n",
    "hollywood_avg_rating = hollywood_movies_clean['imdb_rating'].mean()\n",
    "bollywood_avg_rating = bollywood_movies_clean['imdb_rating'].mean()\n",
    "\n",
    "# Perform a t-test to compare the average IMDb ratings\n",
    "t_statistic, p_value = stats.ttest_ind(\n",
    "    hollywood_movies_clean['imdb_rating'],\n",
    "    bollywood_movies_clean['imdb_rating'],\n",
    "    equal_var=False\n",
    ")\n",
    "\n",
    "# Display results\n",
    "hollywood_avg_rating, bollywood_avg_rating, t_statistic, p_value"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "020d45b0-76be-4163-95b0-4387c72ce46c",
   "metadata": {},
   "source": [
    "## **Q19. Identify any missing values in the dataset. How would you handle them?**\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "bb324095-9661-4937-b390-0bf6d149ca63",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Summary of Missing Values:\n",
      "imdb_rating    1\n",
      "studio         3\n",
      "dtype: int64\n",
      "\n",
      "Summary of Missing Values After Handling:\n",
      "movie_id        0\n",
      "title           0\n",
      "industry        0\n",
      "release_year    0\n",
      "imdb_rating     0\n",
      "studio          0\n",
      "language_id     0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Load the dataset\n",
    "file_path = r'C:\\Users\\ADMIN\\Desktop\\movies-db-1.xlsx'\n",
    "df = pd.read_excel(file_path)\n",
    "\n",
    "# Identify missing values\n",
    "missing_values = df.isna().sum()\n",
    "missing_values_summary = missing_values[missing_values > 0]\n",
    "\n",
    "# Display missing values summary\n",
    "print(\"Summary of Missing Values:\")\n",
    "print(missing_values_summary)\n",
    "\n",
    "# Handle missing values\n",
    "\n",
    "# 1. Fill missing values for numerical columns with the mean\n",
    "df['imdb_rating'] = df['imdb_rating'].fillna(df['imdb_rating'].mean())\n",
    "\n",
    "# 2. Fill missing values for categorical columns with the mode\n",
    "df['studio'] = df['studio'].fillna(df['studio'].mode()[0])\n",
    "\n",
    "# Check for missing values again after handling\n",
    "missing_values_after = df.isna().sum()\n",
    "\n",
    "# Display summary after handling missing values\n",
    "print(\"\\nSummary of Missing Values After Handling:\")\n",
    "print(missing_values_after)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6c018ddb-9d0f-4da0-92bb-b27a32c5c608",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
